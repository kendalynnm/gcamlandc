getwd()
# run with GCAM data (see [other script] for example running with other data)
source("gcam_utils.R")
source("C:/Users/morr497/Documents/OneDriveSafeSpace/gcamlandc/run_land_calc.R")
source("land_utils.R")
read_data <- TRUE  # set this flag if land allocation data needs to be updated. If false, will read from saved files
read_params <- TRUE # set this flag if land leaf parameter data needs to be updated (carbon densities, soil timescales, etc). If false, will read from saved files
protected <- FALSE  # set this flag to include protected lands. If true, will read in protected lands data to replace land inputs 2 & 3
year0 <- 1745
last_year <- 2100  # the year to have carbon emissions vectors go through
stop_year <- 2010  # the year to actually stop calculations
ccycling=TRUE  # if TRUE, turns on carbon density calculations at each time step. If FALSE, code uses fixed densities
rhEff=FALSE  # if TRUE, enables Q10 feedback with temperature (affects soil respiration)
betaEff=FALSE  # if TRUE, enables CO2 fertilization feedback (affects NPP)
coupled=TRUE  # this refers to coupling with Hector. If true, then NBP_constraint is set each year for Hector
if (read_data){
# get input data from GCAM
land_roots <- read_land_inputs_xml2(folder="~land_xml")
gcam_land_alloc <- get_gcam_land_alloc(db_name="database_basexdb",
gcam_dir= "~reference",
scenario="Reference", read_from_file=FALSE)  # scenario is doing nothing when read_from_file is TRUE
leaf_data <- process_xml_inputs(land_roots, gcam_land_alloc)
saveRDS(leaf_data,file="data/leaf_data_test.RDS")  # store for future use
# this currently does something weird. Alternative is to just change the land roots in the read_land_inputs_xml2 to either include or not include protected land
if (protected){
input_file <- "~reference/protected_land_input_2.xml"
additional_file <- "~reference/protected_land_input_3.xml"
leaf_data <- add_protected_leaves(leaf_data,input_file,additional_file,gcam_land_alloc)
saveRDS(leaf_data,file="data/protected_leaf_data.RDS")  # store for future use
}
} else {
if (protected){
leaf_data <- readRDS(file="protected_leaf_data.RDS")
} else leaf_data <- readRDS(file="leaf_data.RDS")
}
leaf_data$name <- paste0(leaf_data$region,"_",leaf_data$landleaf)  # add single column with region + leaf info for easier reference later
if (read_data){
# get input data from GCAM
land_roots <- read_land_inputs_xml2(folder="~land_xml")
gcam_land_alloc <- get_gcam_land_alloc(db_name="database_basexdb",
gcam_dir= "~reference",
scenario="Reference", read_from_file=FALSE)  # scenario is doing nothing when read_from_file is TRUE
leaf_data <- process_xml_inputs(land_roots, gcam_land_alloc)
saveRDS(leaf_data,file="data/leaf_data_test.RDS")  # store for future use
# this currently does something weird. Alternative is to just change the land roots in the read_land_inputs_xml2 to either include or not include protected land
if (protected){
input_file <- "~reference/protected_land_input_2.xml"
additional_file <- "~reference/protected_land_input_3.xml"
leaf_data <- add_protected_leaves(leaf_data,input_file,additional_file,gcam_land_alloc)
saveRDS(leaf_data,file="data/protected_leaf_data.RDS")  # store for future use
}
} else {
if (protected){
leaf_data <- readRDS(file="protected_leaf_data.RDS")
} else leaf_data <- readRDS(file="leaf_data.RDS")
}
# get input data from GCAM
land_roots <- read_land_inputs_xml2(folder="~land_xml/")
getwd()
# get input data from GCAM
land_roots <- read_land_inputs_xml2(folder="land_xml")
gcam_land_alloc <- get_gcam_land_alloc(db_name="database_basexdb",
gcam_dir= "reference",
scenario="Reference", read_from_file=FALSE)  # scenario is doing nothing when read_from_file is TRUE
source("C:/Users/morr497/Documents/OneDriveSafeSpace/gcamlandc/run_land_calc.R")
View(gcam_land_alloc)
source("C:/Users/morr497/Documents/OneDriveSafeSpace/gcamlandc/run_land_calc.R")
source("C:/Users/morr497/Documents/OneDriveSafeSpace/gcamlandc/run_land_calc.R")
source("C:/Users/morr497/Documents/OneDriveSafeSpace/gcamlandc/run_land_calc.R")
source("C:/Users/morr497/Documents/OneDriveSafeSpace/gcamlandc/run_land_calc.R")
source("C:/Users/morr497/Documents/OneDriveSafeSpace/gcamlandc/run_land_calc.R")
source("C:/Users/morr497/Documents/OneDriveSafeSpace/gcamlandc/run_land_calc.R")
source("C:/Users/morr497/Documents/OneDriveSafeSpace/gcamlandc/run_land_calc.R")
# run with GCAM data (see [other script] for example running with other data)
source("gcam_utils.R")
source("land_utils.R")
read_data <- TRUE  # set this flag if land allocation data needs to be updated. If false, will read from saved files
read_params <- TRUE # set this flag if land leaf parameter data needs to be updated (carbon densities, soil timescales, etc). If false, will read from saved files
protected <- TRUE # set this flag to include protected lands. If true, will read in protected lands data to replace land inputs 2 & 3
year0 <- 1745
last_year <- 2100  # the year to have carbon emissions vectors go through
stop_year <- 2010  # the year to actually stop calculations
ccycling=TRUE  # if TRUE, turns on carbon density calculations at each time step. If FALSE, code uses fixed densities
rhEff=FALSE  # if TRUE, enables Q10 feedback with temperature (affects soil respiration)
betaEff=FALSE  # if TRUE, enables CO2 fertilization feedback (affects NPP)
coupled=TRUE  # this refers to coupling with Hector. If true, then NBP_constraint is set each year for Hector
if (read_data){
# get input data from GCAM
land_roots <- read_land_inputs_xml2(folder="land_xml")
gcam_land_alloc <- get_gcam_land_alloc(db_name="database_basexdb",
gcam_dir= "reference",
scenario="Reference", read_from_file=FALSE)  # scenario is doing nothing when read_from_file is TRUE
leaf_data <- process_xml_inputs(land_roots, gcam_land_alloc)
saveRDS(leaf_data,file="data/leaf_data_test.RDS")  # store for future use
# this currently does something weird. Alternative is to just change the land roots in the read_land_inputs_xml2 to either include or not include protected land
if (protected){
input_file <- "reference/protected_land_input_2.xml"
additional_file <- "reference/protected_land_input_3.xml"
leaf_data <- add_protected_leaves(leaf_data,input_file,additional_file,gcam_land_alloc)
saveRDS(leaf_data,file="data/protected_leaf_data.RDS")  # store for future use
}
} else {
if (protected){
leaf_data <- readRDS(file="protected_leaf_data.RDS")
} else leaf_data <- readRDS(file="leaf_data.RDS")
}
source("C:/Users/morr497/Documents/OneDriveSafeSpace/gcamlandc/run_land_calc.R")
source("C:/Users/morr497/Documents/OneDriveSafeSpace/gcamlandc/run_land_calc.R")
source("C:/Users/morr497/Documents/OneDriveSafeSpace/gcamlandc/run_land_calc.R")
source("C:/Users/morr497/Documents/OneDriveSafeSpace/gcamlandc/run_land_calc.R")
# run with GCAM data (see [other script] for example running with other data)
source("gcam_utils.R")
source("land_utils.R")
read_data <- TRUE  # set this flag if land allocation data needs to be updated. If false, will read from saved files
read_params <- TRUE # set this flag if land leaf parameter data needs to be updated (carbon densities, soil timescales, etc). If false, will read from saved files
protected <- TRUE # set this flag to include protected lands. If true, will read in protected lands data to replace land inputs 2 & 3
year0 <- 1745
last_year <- 2100  # the year to have carbon emissions vectors go through
stop_year <- 2010  # the year to actually stop calculations
ccycling=TRUE  # if TRUE, turns on carbon density calculations at each time step. If FALSE, code uses fixed densities
rhEff=FALSE  # if TRUE, enables Q10 feedback with temperature (affects soil respiration)
betaEff=FALSE  # if TRUE, enables CO2 fertilization feedback (affects NPP)
coupled=TRUE  # this refers to coupling with Hector. If true, then NBP_constraint is set each year for Hector
if (read_data){
# get input data from GCAM
land_roots <- read_land_inputs_xml2(folder="land_xml")
gcam_land_alloc <- get_gcam_land_alloc(db_name="database_basexdb",
gcam_dir= "reference",
scenario="Reference", read_from_file=FALSE)  # scenario is doing nothing when read_from_file is TRUE
leaf_data <- process_xml_inputs(land_roots, gcam_land_alloc)
saveRDS(leaf_data,file="data/leaf_data_test.RDS")  # store for future use
# this currently does something weird. Alternative is to just change the land roots in the read_land_inputs_xml2 to either include or not include protected land
if (protected){
input_file <- "reference/protected_land_input_2.xml"
additional_file <- "reference/protected_land_input_3.xml"
leaf_data <- add_protected_leaves(leaf_data,input_file,additional_file,gcam_land_alloc)
saveRDS(leaf_data,file="data/protected_leaf_data.RDS")  # store for future use
}
} else {
if (protected){
leaf_data <- readRDS(file="protected_leaf_data.RDS")
} else leaf_data <- readRDS(file="leaf_data.RDS")
}
input_file <- "reference/protected_land_input_2.xml"
additional_file <- "reference/protected_land_input_3.xml"
leaf_data <- add_protected_leaves(leaf_data,input_file,additional_file,gcam_land_alloc)
gcam_land_alloc <- get_gcam_land_alloc(db_name="database_basexdb",
gcam_dir= "reference",
scenario="Reference", read_from_file=FALSE)
debug(get_gcam_land_alloc)
gcam_land_alloc <- get_gcam_land_alloc(db_name="database_basexdb",
gcam_dir= "reference",
scenario="Reference", read_from_file=FALSE)
gcam_dir
db_name
db_inst
getwd()
db_name
# run with GCAM data (see [other script] for example running with other data)
source("gcam_utils.R")
source("land_utils.R")
read_data <- TRUE  # set this flag if land allocation data needs to be updated. If false, will read from saved files
read_params <- TRUE # set this flag if land leaf parameter data needs to be updated (carbon densities, soil timescales, etc). If false, will read from saved files
protected <- TRUE # set this flag to include protected lands. If true, will read in protected lands data to replace land inputs 2 & 3
year0 <- 1745
last_year <- 2100  # the year to have carbon emissions vectors go through
stop_year <- 2010  # the year to actually stop calculations
ccycling=TRUE  # if TRUE, turns on carbon density calculations at each time step. If FALSE, code uses fixed densities
rhEff=FALSE  # if TRUE, enables Q10 feedback with temperature (affects soil respiration)
betaEff=FALSE  # if TRUE, enables CO2 fertilization feedback (affects NPP)
coupled=TRUE  # this refers to coupling with Hector. If true, then NBP_constraint is set each year for Hector
if (read_data){
# get input data from GCAM
land_roots <- read_land_inputs_xml2(folder="land_xml")
gcam_land_alloc <- get_gcam_land_alloc(db_name="database_basexdb",
gcam_dir= "reference",
scenario="Reference", read_from_file=FALSE)  # scenario is doing nothing when read_from_file is TRUE
leaf_data <- process_xml_inputs(land_roots, gcam_land_alloc)
saveRDS(leaf_data,file="data/leaf_data_test.RDS")  # store for future use
# this currently does something weird. Alternative is to just change the land roots in the read_land_inputs_xml2 to either include or not include protected land
if (protected){
input_file <- "reference/protected_land_input_2.xml"
additional_file <- "reference/protected_land_input_3.xml"
leaf_data <- add_protected_leaves(leaf_data,input_file,additional_file,gcam_land_alloc)
saveRDS(leaf_data,file="data/protected_leaf_data.RDS")  # store for future use
}
} else {
if (protected){
leaf_data <- readRDS(file="protected_leaf_data.RDS")
} else leaf_data <- readRDS(file="leaf_data.RDS")
}
debug(get_gcam_land_allocation)
debug(get_gcam_land_alloc)
debug(get_gcam_land_alloc)
if (read_data){
# get input data from GCAM
land_roots <- read_land_inputs_xml2(folder="land_xml")
gcam_land_alloc <- get_gcam_land_alloc(db_name="database_basexdb",
gcam_dir= "reference",
scenario="Reference", read_from_file=FALSE)  # scenario is doing nothing when read_from_file is TRUE
leaf_data <- process_xml_inputs(land_roots, gcam_land_alloc)
saveRDS(leaf_data,file="data/leaf_data_test.RDS")  # store for future use
# this currently does something weird. Alternative is to just change the land roots in the read_land_inputs_xml2 to either include or not include protected land
if (protected){
input_file <- "reference/protected_land_input_2.xml"
additional_file <- "reference/protected_land_input_3.xml"
leaf_data <- add_protected_leaves(leaf_data,input_file,additional_file,gcam_land_alloc)
saveRDS(leaf_data,file="data/protected_leaf_data.RDS")  # store for future use
}
} else {
if (protected){
leaf_data <- readRDS(file="protected_leaf_data.RDS")
} else leaf_data <- readRDS(file="leaf_data.RDS")
}
if (read_data){
# get input data from GCAM
land_roots <- read_land_inputs_xml2(folder="land_xml")
gcam_land_alloc <- get_gcam_land_alloc(db_name="database_basexdb",
gcam_dir= "reference",
scenario="Reference", read_from_file=FALSE)  # scenario is doing nothing when read_from_file is TRUE
leaf_data <- process_xml_inputs(land_roots, gcam_land_alloc)
saveRDS(leaf_data,file="data/leaf_data_test.RDS")  # store for future use
# this currently does something weird. Alternative is to just change the land roots in the read_land_inputs_xml2 to either include or not include protected land
if (protected){
input_file <- "reference/protected_land_input_2.xml"
additional_file <- "reference/protected_land_input_3.xml"
leaf_data <- add_protected_leaves(leaf_data,input_file,additional_file,gcam_land_alloc)
saveRDS(leaf_data,file="data/protected_leaf_data.RDS")  # store for future use
}
} else {
if (protected){
leaf_data <- readRDS(file="protected_leaf_data.RDS")
} else leaf_data <- readRDS(file="leaf_data.RDS")
}
if (read_data){
# get input data from GCAM
land_roots <- read_land_inputs_xml2(folder="land_xml")
gcam_land_alloc <- get_gcam_land_alloc(db_name="database_basexdb",
gcam_dir= "reference",
scenario="Reference", read_from_file=FALSE)  # scenario is doing nothing when read_from_file is TRUE
leaf_data <- process_xml_inputs(land_roots, gcam_land_alloc)
saveRDS(leaf_data,file="data/leaf_data_test.RDS")  # store for future use
# this currently does something weird. Alternative is to just change the land roots in the read_land_inputs_xml2 to either include or not include protected land
if (protected){
input_file <- "reference/protected_land_input_2.xml"
additional_file <- "reference/protected_land_input_3.xml"
leaf_data <- add_protected_leaves(leaf_data,input_file,additional_file,gcam_land_alloc)
saveRDS(leaf_data,file="data/protected_leaf_data.RDS")  # store for future use
}
} else {
if (protected){
leaf_data <- readRDS(file="protected_leaf_data.RDS")
} else leaf_data <- readRDS(file="leaf_data.RDS")
}
if (read_data){
# get input data from GCAM
land_roots <- read_land_inputs_xml2(folder="land_xml")
gcam_land_alloc <- get_gcam_land_alloc(db_name="database_basexdb",
gcam_dir= "reference",
scenario="Reference", read_from_file=FALSE)  # scenario is doing nothing when read_from_file is TRUE
leaf_data <- process_xml_inputs(land_roots, gcam_land_alloc)
saveRDS(leaf_data,file="data/leaf_data_test.RDS")  # store for future use
# this currently does something weird. Alternative is to just change the land roots in the read_land_inputs_xml2 to either include or not include protected land
if (protected){
input_file <- "reference/protected_land_input_2.xml"
additional_file <- "reference/protected_land_input_3.xml"
leaf_data <- add_protected_leaves(leaf_data,input_file,additional_file,gcam_land_alloc)
saveRDS(leaf_data,file="data/protected_leaf_data.RDS")  # store for future use
}
} else {
if (protected){
leaf_data <- readRDS(file="protected_leaf_data.RDS")
} else leaf_data <- readRDS(file="leaf_data.RDS")
}
# run with GCAM data (see [other script] for example running with other data)
source("gcam_utils.R")
source("land_utils.R")
read_data <- TRUE  # set this flag if land allocation data needs to be updated. If false, will read from saved files
read_params <- TRUE # set this flag if land leaf parameter data needs to be updated (carbon densities, soil timescales, etc). If false, will read from saved files
protected <- TRUE # set this flag to include protected lands. If true, will read in protected lands data to replace land inputs 2 & 3
year0 <- 1745
last_year <- 2100  # the year to have carbon emissions vectors go through
stop_year <- 2010  # the year to actually stop calculations
ccycling=TRUE  # if TRUE, turns on carbon density calculations at each time step. If FALSE, code uses fixed densities
rhEff=FALSE  # if TRUE, enables Q10 feedback with temperature (affects soil respiration)
betaEff=FALSE  # if TRUE, enables CO2 fertilization feedback (affects NPP)
coupled=TRUE  # this refers to coupling with Hector. If true, then NBP_constraint is set each year for Hector
# get input data from GCAM
land_roots <- read_land_inputs_xml2(folder="land_xml")
gcam_land_alloc <- get_gcam_land_alloc(db_name="database_basexdb",
gcam_dir= "reference",
scenario="Reference", read_from_file=FALSE)  # scenario is doing nothing when read_from_file is TRUE
debug(get_gcam_land_alloc)
gcam_land_alloc <- get_gcam_land_alloc(db_name="database_basexdb",
gcam_dir= "reference",
scenario="Reference", read_from_file=FALSE)  # scenario is doing nothing when read_from_file is TRUE
base_conn <- rgcam::localDBConn(gcam_dir, db_name)
if (read_data){
# get input data from GCAM
land_roots <- read_land_inputs_xml2(folder="land_xml")
gcam_land_alloc <- get_gcam_land_alloc(db_name="database_basexdb",
gcam_dir= "/reference",
scenario="Reference", read_from_file=FALSE)  # scenario is doing nothing when read_from_file is TRUE
leaf_data <- process_xml_inputs(land_roots, gcam_land_alloc)
saveRDS(leaf_data,file="data/leaf_data_test.RDS")  # store for future use
# this currently does something weird. Alternative is to just change the land roots in the read_land_inputs_xml2 to either include or not include protected land
if (protected){
input_file <- "reference/protected_land_input_2.xml"
additional_file <- "reference/protected_land_input_3.xml"
leaf_data <- add_protected_leaves(leaf_data,input_file,additional_file,gcam_land_alloc)
saveRDS(leaf_data,file="data/protected_leaf_data.RDS")  # store for future use
}
} else {
if (protected){
leaf_data <- readRDS(file="protected_leaf_data.RDS")
} else leaf_data <- readRDS(file="leaf_data.RDS")
}
if (read_data){
# get input data from GCAM
land_roots <- read_land_inputs_xml2(folder="land_xml")
gcam_land_alloc <- get_gcam_land_alloc(db_name="database_basexdb",
gcam_dir= "reference",
scenario="Reference", read_from_file=FALSE)  # scenario is doing nothing when read_from_file is TRUE
leaf_data <- process_xml_inputs(land_roots, gcam_land_alloc)
saveRDS(leaf_data,file="data/leaf_data_test.RDS")  # store for future use
# this currently does something weird. Alternative is to just change the land roots in the read_land_inputs_xml2 to either include or not include protected land
if (protected){
input_file <- "reference/protected_land_input_2.xml"
additional_file <- "reference/protected_land_input_3.xml"
leaf_data <- add_protected_leaves(leaf_data,input_file,additional_file,gcam_land_alloc)
saveRDS(leaf_data,file="data/protected_leaf_data.RDS")  # store for future use
}
} else {
if (protected){
leaf_data <- readRDS(file="protected_leaf_data.RDS")
} else leaf_data <- readRDS(file="leaf_data.RDS")
}
?localDBConn
system2("java", "-cp C:\\Users\\14065\\Documents\\GCAM\\gcam-v6.0-Windows-Release-Package\\libs/jars\\*;C:\\Users\\14065\\Documents\\GCAM\\gcam-v6.0-Windows-Release-Package\\exe\\XMLDBDriver.jar XMLDBDriver --print-java-home")
?system2
system2("java")
install.packages("pathfindR")
install.packages("pathfindR")
system2("java", "-version")
Sys.setenv("PATH" = "C:/Users/morr497/Documents/OneDriveSafeSpace/openjdk-20.0.1_windows-x64_bin/jdk-20.0.1/bin")
system2("java", "-version")
system2("java", "-version")
Sys.setenv("PATH" = "C:/Users/morr497/Documents/OneDriveSafeSpace/openjdk-20.0.1_windows-x64_bin/jdk-20.0.1/bin")
system2("java", "-version")
source("C:/Users/morr497/Documents/OneDriveSafeSpace/gcamlandc/run_land_calc.R")
last_year
library(dplyr)
getwd()
Sys.setenv("PATH" = "C:/Users/morr497/Documents/OneDriveSafeSpace/openjdk-20.0.1_windows-x64_bin/jdk-20.0.1/bin")
system2("java", "-version")
AG_emissions <- read.csv("data_reference/ag_emiss_full_world_real-baseline_no-protected_2100.csv", row.names = 1)
BG_emissions <- read.csv("data_reference/bg_emiss_full_world_real-baseline_no-protected_2100.csv", row.names = 1)
climate_data <- read.csv("data_reference/climate_data_full_world_real-baseline_no-protected_2100.csv")
gcam_land <- read.csv("data_reference/gcam_land_alloc.csv")
leaf_data <- read.csv("data_reference/leaf_data_full_world_real-baseline_no-protected_2100.csv")
leaf_params <- read.csv("data_reference/leaf_params_full_world_real-baseline_no-protected_2100.csv")
# transform bg emissions to format able to be joined with other leaf data
BG <- data.frame(t(BG_emissions))
colnames(BG) <- row.names(BG_emissions)
BG$year <- seq(year0,last_year)
BG_final <- BG %>% tidyr::pivot_longer(cols=-c("year"),
names_to = "name",
values_to="bg_emiss")
# same for ag emissions
AG <- data.frame(t(AG_emissions))
colnames(AG) <- row.names(AG_emissions)
AG$year <- seq(year0,last_year)
AG_final <- AG %>% tidyr::pivot_longer(cols=-c("year"),
names_to = "name",
values_to="ag_emiss")
# combine
leaf_data %>% select(-X) %>%
left_join(BG_final, by = c("year", "name")) %>%
left_join(AG_final, by = c("year", "name")) -> plot_data
plot_data$tot_nbp <- plot_data$ag_emiss + plot_data$bg_emiss
plot_data$npp_rh <- plot_data$NPP/plot_data$Rh
plot_data_long <- plot_data %>%
tidyr::pivot_longer(cols=c("land_alloc","agCDensity","bgCDensity","agCarbon",
"bgCarbon","NPP","Rh","litter","bg_emiss","ag_emiss","tot_nbp", "npp_rh"),
names_to="variable",
values_to="value")
write.csv(plot_data_long, "reference_data.csv")
head(plot_data_long)
unique(plot_data_long$region)
selected
View(climate_data)
ggplot(data=dplyr::filter(climate_data,year<=2050),aes(x=year,y=value))+
geom_line()+
facet_wrap(~variable,scales="free_y")+
theme_classic() -> fig
library(dplyr)
library(ggplot2)
ggplot(data=dplyr::filter(climate_data,year<=2050),aes(x=year,y=value))+
geom_line()+
facet_wrap(~variable,scales="free_y")+
theme_classic() -> fig
ggsave(filename=paste0("climate_data.png"),plot=fig,width=10,height=6)
?sample
test_leaves <- sample(row.names(AG_final),500)
test_leaves
View(AG_final)
View(AG_emissions)
test_leaves <- sample(row.names(AG_emissions),500)
test_leaves
sample_leaves <- c("China_Grassland_IndusR", "India_Shrubland_BrahmaniR",
"USA_CornC4_GreatBasin_RFD_hi", "South America_Northern_Wheat_SAmerCstNE_RFD_lo",
"Russia_Tundra_BalticSea", "Africa_Northern_UnmanagedPasture_MeditS",
"Brazil_UnmanagedForest_RioLaPlata", "Russia_Forest_KaraSea")
sample_leaf_data <- dplyr::filter(plot_data_2050,name %in% sample_leaves)
sample_leaf_data <- dplyr::filter(plot_data_long,name %in% sample_leaves)
View(sample_leaf_data)
sample_emiss_data <- sample_leaf_data %>% dplyr::filter(variable=="tot_nbp") %>% select(-c("variable"))
sample_density <- sample_leaf_data %>% dplyr::filter(variable %in% c("agCDensity","bgCDensity"))
sample_bgDensity <- sample_leaf_data %>% dplyr::filter(variable=="bgCDensity") %>% select(-c("variable"))
sample_agDensity <- sample_leaf_data %>% dplyr::filter(variable=="agCDensity") %>% select(-c("variable"))
ggplot(data=sample_emiss_data,aes(x=year,y=value)) +#,linetype=scenario))+
geom_line()+
ylab("Land Carbon Flux (Mt C/yr)")+
xlab("Year")+
facet_wrap(~name,scales="free_y",nrow=4)+
theme_classic()->fig
ggsave(filename="sample_leaf_emissions.png",plot=fig,width=10,height=8)
ggplot(data=sample_agDensity,aes(x=year,y=value)) +#,linetype=scenario))+
geom_line()+
ylab("Vegetation Carbon Density")+
xlab("Year")+
facet_wrap(~name,scales="free_y",nrow=4)+
theme_classic()->fig
ggsave(filename="sample_leaf_agCDensities.png",plot=fig,width=10,height=8)
ggplot(data=sample_bgDensity,aes(x=year,y=value)) +#,linetype=scenario))+
geom_line()+
ylab("Soil Carbon Density")+
xlab("Year")+
facet_wrap(~name,scales="free_y",nrow=4)+
theme_classic()->fig
ggsave(filename="sample_leaf_bgCDensities.png",plot=fig,width=10,height=8)
View(sample_agDensity)
sample_ag_emiss <- sample_leaf_data %>% dplyr::filter(variable=="ag_emiss") %>% select(-c("variable"))
sample_bg_emiss <- sample_leaf_data %>% dplyr::filter(variable=="bg_emiss") %>% select(-c("variable"))
ggplot(data=sample_ag_emiss,aes(x=year,y=value)) +#,linetype=scenario))+
geom_line()+
ylab("Vegetation Carbon Density")+
xlab("Year")+
facet_wrap(~name,scales="free_y",nrow=4)+
theme_classic()->fig
ggsave(filename="sample_leaf_ag_emiss.png",plot=fig,width=10,height=8)
ggplot(data=sample_bg_emiss,aes(x=year,y=value)) +#,linetype=scenario))+
geom_line()+
ylab("Soil Carbon Density")+
xlab("Year")+
facet_wrap(~name,scales="free_y",nrow=4)+
theme_classic()->fig
ggsave(filename="sample_leaf_bg_emiss.png",plot=fig,width=10,height=8)
source("C:/Users/morr497/Documents/OneDriveSafeSpace/gcamlandc/run_land_calc.R")
View(soil_timescales)
View(outer_params2)
View(outer_params2)
View(outer_land_alloc2)
